Theory: Data structures
a data structure is a collection of elements containing data, the relationships among them, and the operations that can be applied to the data.
some common data structures: array, linked list, hash table, various trees (binary search tree, heap, red-black tree, B-tree, etc).

Abstract Data Type is an abstract type which is defined by a value and a set of possible operations (behavior) from the point of view of a user of the data.

There are some common data structures that every trained programmer should know: stack, queue, priority queue, map (or dictionary), set. As a rule, modern programming languages like Java, Python, C++ provides them in standard libraries for use in new programs.

data structures are used to effectively organize and manage data in programs. T a related concept called abstract data type (ADT) hides a specific data structure, providing only a well-defined set of operations necessary for the user-programmer.

Recursion:
recursion in programming is when a function calls itself.
Each recursive function consists of the following steps:
      A trivial base case stops the recursion. This is the case we know the result for. For example, if we find a doll we can’t open, we take it and proudly state: “that it’s our smallest doll!”
      A reduction step gets us from the current problem to a simpler one.
recursion is usually slower and less memory-efficient, but it saves the developers' time.
