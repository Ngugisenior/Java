package org.mik.realestate.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.mik.realestate.domain.Domain;

/**
 * Abstract DAO (Data Access Object)
 * 
 * @author zamek
 *
 * @param <T> Type of domain.
 */
public abstract class AbstractDao<T extends Domain> {

	/**
	 * HSQLDB driver class name
	 */
	private final static String DRIVER_NAME="org.hsqldb.jdbc.JDBCDriver"; //$NON-NLS-1$
			
	/**
	 * database url
	 *
	 */
	//TODO You need to set it for the convenient path on your machine
	protected final static String DB_URI= "jdbc:hsqldb:realestatedb";  //$NON-NLS-1$;
	
	/**
	 * Username for database. Default name is sa
	 */
	protected final static String DB_USER="sa"; //$NON-NLS-1$
	
	/**
	 * Password for database. Default password is empty string
	 */
	protected final static String DB_PASSWORD=""; //$NON-NLS-1$
	
	/**
	 * Connection to database
	 */
	protected  Connection connection;
	
	/**
	 * Create a new domain from inherited object
	 * 
	 * @param rs ResultSet from database
	 * @return a new domain
	 * @throws SQLException if any error happens
	 */
	protected abstract T createDomain(ResultSet rs) throws SQLException;
	
	/**
	 * Get the domain field values as an object array from the inherited object
	 * 
	 * @param domain the domain
	 * @return field of domain as object array
	 */
	protected abstract Object[] getDomainValues(T domain);
	
	/**
	 * Get the domain field values for update as an object array from the inherited object
	 * 
	 * @param domain the domain
	 * @return field of domain as object array
	 */
	protected abstract Object[] getDomainValuesForUpdate(T domain);
	
	/**
	 * Get insert sql string from inherited object,
	 * 
	 * @return the insert sql string
	 */
	protected abstract String getInsertSql();
	
	/**
	 * Get delete sql string from inherited object,
	 * 
	 * @return the delete sql string
	 */
	protected abstract String getDeleteSql();
	
	/**
	 * Get delete all sql string from inherited object,
	 * 
	 * @return delete sql string
	 */
	protected abstract String getDeleteAllSql();

	/**
	 * Get the update sql string from inherited object
	 * 
	 * @return the sql string
	 */
	protected abstract String getUpdateSql();
	
	/**
	 * Constructor for DAO
	 * 
	 * Tries to create a new connection to database
	 * 
	 * @param url url for database
	 * @param user usernam
	 * @param password password
	 */
	public AbstractDao(String url, String user, String password) {
		try {
			Class.forName(DRIVER_NAME);
			this.connection=DriverManager.getConnection(url,user,password);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Close connection
	 * 
	 */
	public void shutdown() {
		try {
			this.connection.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Prepare a statement. 
	 * 
	 * replace ? characters in sql string with given values
	 * 
	 * @param sql SQL string for example select * from table where id=? and name='?'
	 * 
	 * values array contains parameters for each ? characters.
	 * 
	 * @param returnGeneratedKeys if true primary key generated by database. 
	 * @param values values array
	 * @return prepared statement
	 * @throws SQLException if any error happens
	 */
	protected PreparedStatement prepareStatement(String sql, boolean returnGeneratedKeys, Object... values) throws SQLException {
		PreparedStatement stmt=this.connection.prepareStatement(sql, 
				returnGeneratedKeys ? Statement.RETURN_GENERATED_KEYS:Statement.NO_GENERATED_KEYS);
		setValues(stmt, values);
		return stmt;
	}
	
	/**
	 * Set values in statement. 
	 * 
	 * @param stmt sql statement 
	 * @param values values array
	 * @throws SQLException if any error happens
	 */
	protected static void setValues(PreparedStatement stmt, Object...values) throws SQLException {
		for(int i=0;i<values.length;i++)
			stmt.setObject(i+1, values[i]);
	}
	
	/**
	 * find a domain with given sql string and given parameters
	 * 
	 * @param sql sql string like select * from table where id=?
	 * @param values values parameter array
	 * @return an object or null if where condition is false
	 */
    protected T find(String sql, Object... values) {
    	try {
    		PreparedStatement stmt=prepareStatement(sql, false, values);
    		try (ResultSet rs=stmt.executeQuery()){
    			return rs.next() ? createDomain(rs) : null;
    		}
    	}
    	catch(SQLException e) {
    		e.printStackTrace();
    		return null;
    	}
    }

    /**
     * find list of domains based sql script
     * 
     * @param sql the sql script like select * from table
     * @return the list of domains
     */
	protected List<T> list(String sql) {
		List<T> result = new ArrayList<>();
		try {
			try(PreparedStatement stmt = this.connection.prepareStatement(sql)) {
				try (ResultSet rs = stmt.executeQuery()) {
					while(rs.next()) 
						result.add(createDomain(rs));
				}
			}
			return result;
		}
		catch(SQLException e) {
			e.printStackTrace();
			return result;
		}
	}
	
	/**
	 * Insert a new domain to database
	 * 
	 * @param domain the new domain. The domain id must be null
	 * 
	 * @return the inserted new domain with database generated id
	 * @throws IllegalArgumentException if any error happens
	 */
	public T insert(T domain) throws IllegalArgumentException {
		try {
			if (domain.getId()!=null)
				throw new IllegalArgumentException("The domain is already created, id is not null"); //$NON-NLS-1$
			
			try (PreparedStatement stmt = prepareStatement(getInsertSql(), true, getDomainValues(domain))) {
				int affectedRows = stmt.executeUpdate();
				if (affectedRows==0) 
					throw new Exception("Creating domain failed"); //$NON-NLS-1$
				try(ResultSet generatedKeys = stmt.getGeneratedKeys()) {
					if (generatedKeys.next()) 
						domain.setId(Integer.valueOf(generatedKeys.getInt(1)));
					else
						throw new Exception("primary key generation failed"); //$NON-NLS-1$
				}
			}
			return domain;
		}
		catch(Exception e) {
			e.printStackTrace();
			return domain;
		}
	}
	
	/**
	 * update a domain. 
	 * 
	 * 
	 * @param domain the domain. The id must be not null
	 * @return the updated domain
	 * @throws IllegalArgumentException if any error happens
	 */
	public T update(T domain) throws IllegalArgumentException {
		if (domain.getId()==null)
			throw new IllegalArgumentException("Domain is not created yet, id is null"); //$NON-NLS-1$
		try (PreparedStatement stmt=prepareStatement(getUpdateSql(), false, getDomainValuesForUpdate(domain))) {
			int affectedRows = stmt.executeUpdate();
			if (affectedRows==0) 
				throw new Exception("Updating domain failed, no rows affected"); //$NON-NLS-1$
			
			return domain;
		}
		catch (Exception e) {
			e.printStackTrace();
			return domain;
		}
	}
	
	/**
	 * Delete a domain 
	 * 
	 * @param domain the domain
	 * @throws Exception if any error happens
	 */
	public void delete(T domain) throws Exception {
		Object[] values = { domain.getId() };
		try (PreparedStatement stmt = prepareStatement(getDeleteSql(), false, values)) {
			int affectedRows = stmt.executeUpdate();
			if (affectedRows==0) 
				throw new Exception("Deleting domain failed"); //$NON-NLS-1$
			domain.setId(null);
		}
	}
	
	/**
	 * Delete all domain from table
	 * 
	 * @throws SQLException if any error happens
	 */
	public void deleteAll() throws SQLException {
		try (PreparedStatement stmt = prepareStatement(getDeleteAllSql(), false)) {
			stmt.execute();
		}
	}
}
